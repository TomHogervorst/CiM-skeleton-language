module Statement

imports
  Common
  Expression
  Signal
  Type
  
sorts
  Statement
  
context-free start-symbols
  Statement
  
template options
  tokenize: "("
  keyword -/- [a-zA-Z]

context-free syntax
  ConSkel.ConSkel = <<Exp> =\>>
  Statement.Accolades = <{
		<{Statement "\n"}*>
}>														{left}
  Statement.VarAssign = <<ID> = <Exp>;>
  Statement.ArrayAssign = <<ID>[<Exp>] = <Exp>;>
  Statement.SignalAssign = <<Signal> =\> <ConSkel?> <ID>[<Exp>];>
  Statement.AltSingleSignalAssign = <<Signal> =\> <ConSkel?> <ID>;> 
  Statement.OutputAssign = <deprecated_out[<Exp>] \<= <Signal> \<= <Exp>;>
  Statement.IfThenElse = <if <Exp> then
  	<Statement>
  else
  	<Statement>> {left}
  Statement.WhileLoop = <while <Exp> do
  	<Statement>> {left}
  Statement.ForLoop = <for <ID> = <Exp> do
  	<Statement>> {left}
  
  Statement.CompAttrAssign = <<ID>[<Exp>].<Attr> = <Exp>;>
  Statement.SingleCompAttrAssign = <<ID>.<Attr> = <Exp>;>
  
  Statement.VarDecl = <<Type> <ID>;>
  Statement.VarDeclInit = <<Type> <ID> = <Exp>;>
  Statement.SingleSignalDecl = <signal <ID>;>
  Statement.SignalDecl = <signal <ID>[<Exp>];>
  
  ModInt.Any = <_>
  ModInt.MInt = <<INT>>
  ModInt.Var = <<ID>>
  
  //Statement.ModDecl = <module \<<ModInt> | <ModInt>\><ID>[<Exp>];>
  //Statement.SingleModDecl = <module \<<ModInt> | <ModInt>\><ID>;>
  //SkelStatement.PortAssign = <<ID>.inport = <Exp>;>