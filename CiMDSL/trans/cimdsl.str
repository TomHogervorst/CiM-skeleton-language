module cimdsl

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	src-gen/stratego/metaborg
	runtime/index/-
	runtime/nabl/-
	runtime/properties/-
	runtime/types/-
	runtime/task/-
	runtime/analysis/-
	libspoofax/term/-
	pp
  trans/gen-dfg
  trans/gen-mapping
  trans/gen-drawing
  trans/gen-systemc
  src-gen/names/lib
  deref
  desugar
  helper
  component-trans
  statement-trans
  src-gen/signatures/-
  src-gen/signatures/graphics/-
  src-gen/signatures/mapped/-
  src-gen/signatures/SystemC/-
  src-gen/types/types
  outline
  analysis
  
rules //index related rules
	
	nabl-prop-site(|lang, ctx, uri*, state*, implicit*):
		Program(funcblocks*, main, comps*, skels*) -> <fail>
  where
 	<map-with-index(store-index(|ctx))> funcblocks*;
 	<store-indices(|ctx)> main;
 	<map(store-indices(|ctx))> comps*;
 	<map-with-index(store-index(|ctx))> comps*;
 	<map(store-indices(|ctx))> skels*;
 	<map-with-index(store-index(|ctx))> skels*
 	
	 store-indices(|ctx):
	 	Main(insigs*, outsigs*, argdecls*, statement) -> res
	 	with
	 		vardecls* := <statement-get-vardecls> statement;
	 		sigdecls* := <statement-get-sigdecls> statement;
	 		inoutsigs* := [insigs*, outsigs*];
			totalsigs* := [inoutsigs*, sigdecls*];
	 		allvars* := [argdecls*, vardecls*];
	 		<map-with-index(store-index(|ctx))> totalsigs*;
	 		res := <map-with-index(store-index(|ctx))> allvars*
	 
	 store-indices(|ctx):
	 	Component(_, insigs*, outsigs*, argdecls*, statement) -> result
	 	with
	 		vardecls* := <statement-get-vardecls> statement;
	 		sigdecls* := <statement-get-sigdecls> statement;
	 		inoutsigs* := [insigs*, outsigs*];
			totalsigs* := [inoutsigs*, sigdecls*];
	 		allvars* := [argdecls*, vardecls*];
	 		<map-with-index(store-index(|ctx))> totalsigs*;
	 		result := <map-with-index(store-index(|ctx))> allvars*
	 		
	 store-indices(|ctx):
	 	Skeleton(_, ins, outs, argDecls*, statement) -> result
	 	with
	 		<map-with-index(store-index(|ctx))> [ins, outs];
	 		statementVarDecls* := <statement-get-vardecls> statement;
	 		totalVarDecls* := [argDecls*, statementVarDecls*];
	 		result := <map-with-index(store-index(|ctx))> totalVarDecls*
	 		
	 /*
	 	Module arguments in skeleton definitions have implicitly defined variables.
	 	This function helps find them and number them for future dereferencing.
	 */
	 		
	 mods-get-vardecls:
	 	(ModParam(usInSize, usOutSize, _, usSize), ModParam(dsInSize, dsOutSize, _, dsSize)) -> resVarArray*
	 	with
	 		resVarArray* := <get-var-names(|[])> [usInSize, usOutSize, usSize, dsInSize, dsOutSize, dsSize]
	 		
	 		
	 get-var-names(|currentNames*):
	 	[size | sizes*] -> res*
	 	with
	 		if <get-var-name> size then
	 			varName := <get-var-name> size;
	 			if <eq>(<length><filter(?varName; id)> currentNames*, 1) then
	 				newVarNames* := currentNames*;
	 				thisRes* := []
	 			else
	 				newVarName* := [varName];
	 				newVarNames* := [currentNames*, newVarName*];
	 				thisRes* := [size]
	 			end
	 		else
	 			newVarNames* := currentNames*;
	 			thisRes* := []
	 		end;
	 		thatRes* := <get-var-names(|newVarNames*)> sizes*;
	 		res* := [thisRes*, thatRes*]
	 		
	 get-var-names(|currentNames*):
	 	[] -> []
	 	
	 get-var-name:
	 	Var(name) -> name
	 	
	 get-var-name:
	 	VarRef(name) -> name
	 		
	 store-index(|ctx):
		(i, FuncBlock(name, _ , _, _, _, _)) -> <store-lib-index(|ctx, i)> name
	
	 store-index(|ctx):
	 	(i, Component(name, _, _, _, _)) -> <store-comp-index(|ctx, i)> name
	 		
	 store-index(|ctx):
	 	(i, Skeleton(name, _, _, _, _)) -> <store-skel-index(|ctx, i)> name	 	
	 		
	 store-index(|ctx):
	 	(i, SigParam(name, size)) -> <store-sig-index(|ctx, i)> name
	 		
	 store-index(|ctx):
	 	(i, SignalDecl(name, size)) -> <store-sig-index(|ctx, i)> name
	 	
	 store-index(|ctx):
	 	(i, SingleSignalDecl(name)) -> <store-sig-index(|ctx, i)> name
	 		
	 store-index(|ctx):
	 	(i, VarDecl(t, name)) -> <store-var-index(|ctx, i)> name
	 	
	 store-index(|ctx):
	 	(i, Var(name)) -> <store-var-index(|ctx, i)> name
	 		
	 store-index(|ctx):
	 	(i, VarDeclInit(t, name, exp)) -> <store-var-index(|ctx, i)> name
	 		
	 store-index(|ctx):
	 	(i, ParamDecl(t, name)) -> <store-var-index(|ctx, i)> name
	 	
	 store-index(|ctx):
	 	(i, ModParam(_, _, name, _)) -> <store-mod-index(|ctx, i)> name
	 	
	 store-index(|ctx):
	 	(i, SingleModParam(_, _, name)) -> <store-mod-index(|ctx, i)> name
	 


rules // Editor services

  editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

/*  editor-hover:
    (target, position, ast, path, project-path) -> hover
    where
      hover := <get-editor-properties(pp-partial-CiMDSL|<language>, project-path); properties-to-html> target*/
      
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-CiMDSL> selected
      
  editor-complete:
  	(selected, position, ast, path, project-path) -> []

rules // Debugging
  
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected
      
   debug-show-desugared-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desug.aterm")> path;
      result   := <desugar-all> selected
      
   debug-show-deref:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := <guarantee-extension(|"deref.aterm")> path;
      result   := <desugar-all; unroll-and-dereference(|ast)> selected

  debug-show-dfg:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := <guarantee-extension(|"spr")> path;
      dfg   := <desugar-all; gen-dfg> ast
      ; result := <pp-start-symbols; !V([], <id>); box2text-string(|120)> dfg
      
        
  debug-show-mapping:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := <guarantee-extension(|"map")> path;
      result   := <desugar-all; gen-mapping> ast
      
   generate-systemc:
   	(selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := "generated_system.h";
      result   := <desugar-all; gen-systemc> ast

   debug-draw:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := <guarantee-extension(|"c")> path;
      result   := <desugar-all; gen-drawing> ast
      
    debug-index-project =
		analysis-debug-index-project(|<language>)
	debug-index-project-resolve = 
		analysis-debug-index-project-resolve(|<language>)
	debug-index-partition =
		analysis-debug-index-partition(|<language>)
	debug-index-partition-resolve =
		analysis-debug-index-partition-resolve(|<language>)
		
