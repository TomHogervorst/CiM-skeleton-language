module lib

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/relations/-
  lib/runtime/editor/-
  src-gen/signatures/FuncBlock-sig
  src-gen/signatures/MiniJava-sig
  src-gen/signatures/Signal-sig
  src-gen/signatures/Statement-sig
  src-gen/signatures/Component-sig
  src-gen/signatures/Common-sig
  src-gen/signatures/Type-sig
  src-gen/signatures/Expression-sig
  src-gen/signatures/Skeleton-sig


signature
  constructors
    NablNsLibrary   : Namespace
    NablNsComponent : Namespace
    NablNsSignal    : Namespace
    NablNsVariable  : Namespace
    NablNsModule    : Namespace
    NablNsSkeleton  : Namespace


signature
  constructors
    NablProp_lib-index  : Property
    NablProp_sig-index  : Property
    NablProp_var-index  : Property
    NablProp_comp-index : Property
    NablProp_mod-index  : Property
    NablProp_skel-index : Property


rules

  nabl-custom-properties(add-properties) =
    ![ NablProp_lib-index()
     , NablProp_sig-index()
     , NablProp_var-index()
     , NablProp_comp-index()
     , NablProp_mod-index()
     , NablProp_skel-index()
     ]
    ; add-properties

  lib-index-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  lib-index-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  lib-index-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_lib-index())

  lib-index-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  lib-index-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  lib-index-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_lib-index(), ctx__, [])

  lib-index-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_lib-index(), ctx__, dep*)

  lib-index-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_lib-index()
    , ctx__
    , Eq()
    , expected
    )

  lib-index-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_lib-index(), ctx__, relation, expected)

  create-lib-index-task(|ctx__) =
    fail

  get-lib-index(|) =
    get-property(|NablProp_lib-index())

  store-lib-index(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_lib-index(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-lib-index-task(|ctx__)> term
    where NablProp_lib-index() := kind

  sig-index-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  sig-index-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  sig-index-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_sig-index())

  sig-index-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  sig-index-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  sig-index-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_sig-index(), ctx__, [])

  sig-index-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_sig-index(), ctx__, dep*)

  sig-index-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_sig-index()
    , ctx__
    , Eq()
    , expected
    )

  sig-index-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_sig-index(), ctx__, relation, expected)

  create-sig-index-task(|ctx__) =
    fail

  get-sig-index(|) =
    get-property(|NablProp_sig-index())

  store-sig-index(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_sig-index(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-sig-index-task(|ctx__)> term
    where NablProp_sig-index() := kind

  var-index-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  var-index-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  var-index-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_var-index())

  var-index-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  var-index-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  var-index-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_var-index(), ctx__, [])

  var-index-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_var-index(), ctx__, dep*)

  var-index-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_var-index()
    , ctx__
    , Eq()
    , expected
    )

  var-index-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_var-index(), ctx__, relation, expected)

  create-var-index-task(|ctx__) =
    fail

  get-var-index(|) =
    get-property(|NablProp_var-index())

  store-var-index(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_var-index(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-var-index-task(|ctx__)> term
    where NablProp_var-index() := kind

  comp-index-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  comp-index-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  comp-index-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_comp-index())

  comp-index-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  comp-index-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  comp-index-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_comp-index(), ctx__, [])

  comp-index-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_comp-index(), ctx__, dep*)

  comp-index-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_comp-index()
    , ctx__
    , Eq()
    , expected
    )

  comp-index-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_comp-index(), ctx__, relation, expected)

  create-comp-index-task(|ctx__) =
    fail

  get-comp-index(|) =
    get-property(|NablProp_comp-index())

  store-comp-index(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_comp-index(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-comp-index-task(|ctx__)> term
    where NablProp_comp-index() := kind

  mod-index-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  mod-index-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  mod-index-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_mod-index())

  mod-index-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  mod-index-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  mod-index-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_mod-index(), ctx__, [])

  mod-index-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_mod-index(), ctx__, dep*)

  mod-index-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_mod-index()
    , ctx__
    , Eq()
    , expected
    )

  mod-index-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_mod-index(), ctx__, relation, expected)

  create-mod-index-task(|ctx__) =
    fail

  get-mod-index(|) =
    get-property(|NablProp_mod-index())

  store-mod-index(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_mod-index(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-mod-index-task(|ctx__)> term
    where NablProp_mod-index() := kind

  skel-index-is(|ctx__) =
    nabl-prop-calc(|ctx__, [])

  skel-index-is(|ctx__, dep*) =
    nabl-prop-calc(|ctx__, dep*)

  skel-index-task(|ctx__) =
    get-or-create-property-task(|ctx__, NablProp_skel-index())

  skel-index-list(|ctx__) =
    nabl-prop-list(|ctx__, [])

  skel-index-list(|ctx__, dep*) =
    nabl-prop-list(|ctx__, dep*)

  skel-index-lookup(|ctx__) =
    nabl-prop-lookup(|NablProp_skel-index(), ctx__, [])

  skel-index-lookup(|ctx__, dep*) =
    nabl-prop-lookup(|NablProp_skel-index(), ctx__, dep*)

  skel-index-match(|ctx__, expected) =
    nabl-prop-match(
    | NablProp_skel-index()
    , ctx__
    , Eq()
    , expected
    )

  skel-index-match(|ctx__, relation, expected) =
    nabl-prop-match(|NablProp_skel-index(), ctx__, relation, expected)

  create-skel-index-task(|ctx__) =
    fail

  get-skel-index(|) =
    get-property(|NablProp_skel-index())

  store-skel-index(|ctx__, prop) =
    nabl-store-prop(
    | ctx__
    , Prop(NablProp_skel-index(), prop, [])
    )

  create-property-task(|ctx__, kind):
    term -> <create-skel-index-task(|ctx__)> term
    where NablProp_skel-index() := kind


rules

  nabl-get-name :
    FuncBlock(name, _, _, _, _, _) -> name

  nabl-name-apply(s) =
    FuncBlock(s, id, id, id, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?FuncBlock(name, _, _, _, _, _)
    ; origin-track-forced(
        FuncBlock(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsLibrary()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        , id
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?FuncBlock(name, _, _, _, _, _)
    ; (where(id)
       ; FuncBlock(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), Comp(), [])]
           )
         , id
         , id
         , id
         , id
         , id
         ))
    ; fail

  nabl-scoping-site =
    ?Program(_, _, _, _)
    ; nabl-scope(
      | [NablNsLibrary(), NablNsComponent(), NablNsSkeleton()]
      )

  nabl-get-scope =
    ?Program(_, _, _, _)
    ; ![NablNsLibrary(), NablNsComponent(), NablNsSkeleton()]

  nabl-get-scope =
    ?Skeleton(name, _, _, _, _)
    ; ![NablNsModule(), NablNsVariable()]

  nabl-get-name :
    Skeleton(name, _, _, _, _) -> name

  nabl-name-apply(s) =
    Skeleton(s, id, id, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Skeleton(name, _, _, _, _)
    ; origin-track-forced(
        Skeleton(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSkeleton()
          , Unique()
          , Current()
          , [NablNsModule(), NablNsVariable()]
          , []
          )
        , id
        , id
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-scope =
    ?Component(name, _, _, args*, _)
    ; ![NablNsSignal(), NablNsVariable()]

  nabl-get-name :
    Component(name, _, _, args*, _) -> name

  nabl-name-apply(s) =
    Component(s, id, id, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Component(name, _, _, args*, _)
    ; origin-track-forced(
        Component(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsComponent()
          , Unique()
          , Current()
          , [NablNsSignal(), NablNsVariable()]
          , []
          )
        , id
        , id
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?Component(name, _, _, args*, _)
    ; (where(a_t* := <new-task-fixdeps(|ctx__, [])> Id(
                                                      <get-or-create-property-task(|ctx__, Type())> args*
                                                    ))
       ; Component(
           nabl-store-props(
           | ctx__
           , [ Prop(
                 Type()
               , (Comp(), a_t*)
               , []
               )
             ]
           )
         , id
         , id
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    CompRef(name, _) -> name

  nabl-name-apply(s) =
    CompRef(s, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?CompRef(name, _)
    ; origin-track-forced(
        CompRef(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsComponent()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-scoping-site =
    ?Main(_, _, _, _)
    ; nabl-scope(
      | [NablNsSignal(), NablNsVariable()]
      )

  nabl-get-scope =
    ?Main(_, _, _, _)
    ; ![NablNsSignal(), NablNsVariable()]

  nabl-get-name :
    SignalDecl(name, size) -> name

  nabl-name-apply(s) =
    SignalDecl(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?SignalDecl(name, size)
    ; origin-track-forced(
        SignalDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSignal()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    SigParam(name, size) -> name

  nabl-name-apply(s) =
    SigParam(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?SigParam(name, size)
    ; origin-track-forced(
        SigParam(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSignal()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    SignalAssign(_, _, name, _) -> name

  nabl-name-apply(s) =
    SignalAssign(id, id, s, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?SignalAssign(_, _, name, _)
    ; origin-track-forced(
        SignalAssign(
          id
        , id
        , nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSignal()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-get-name :
    SigRef(name, _) -> name

  nabl-name-apply(s) =
    SigRef(s, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?SigRef(name, _)
    ; origin-track-forced(
        SigRef(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSignal()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-get-name :
    ModRef(name, index) -> name

  nabl-name-apply(s) =
    ModRef(s, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?ModRef(name, index)
    ; origin-track-forced(
        ModRef(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsModule()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-get-name :
    SingleModRef(name) -> name

  nabl-name-apply(s) =
    SingleModRef(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?SingleModRef(name)
    ; origin-track-forced(
        SingleModRef(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsModule()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    ModParam(_, _, name, _) -> name

  nabl-name-apply(s) =
    ModParam(id, id, s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?ModParam(_, _, name, _)
    ; origin-track-forced(
        ModParam(
          id
        , id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsModule()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    SingleModParam(_, _, name) -> name

  nabl-name-apply(s) =
    SingleModParam(id, id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?SingleModParam(_, _, name)
    ; origin-track-forced(
        SingleModParam(
          id
        , id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsModule()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    CompAttrAssign(name, index, attr, exp) -> name

  nabl-name-apply(s) =
    CompAttrAssign(s, id, id, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?CompAttrAssign(name, index, attr, exp)
    ; origin-track-forced(
        CompAttrAssign(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsModule()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        , id
        , id
        )
      |
      )

  nabl-get-name :
    SingleCompAttrAssign(name, attr, exp) -> name

  nabl-name-apply(s) =
    SingleCompAttrAssign(s, id, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?SingleCompAttrAssign(name, attr, exp)
    ; origin-track-forced(
        SingleCompAttrAssign(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsModule()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        , id
        )
      |
      )

  nabl-get-name :
    ParamDecl(t, name) -> name

  nabl-name-apply(s) =
    ParamDecl(id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?ParamDecl(t, name)
    ; origin-track-forced(
        ParamDecl(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?ParamDecl(t, name)
    ; (where(id)
       ; ParamDecl(
           id
         , nabl-store-props(
           | ctx__
           , [Prop(Type(), t, [])]
           )
         ))
    ; fail

  nabl-get-name :
    VarDecl(t, name) -> name

  nabl-name-apply(s) =
    VarDecl(id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?VarDecl(t, name)
    ; origin-track-forced(
        VarDecl(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?VarDecl(t, name)
    ; (where(id)
       ; VarDecl(
           id
         , nabl-store-props(
           | ctx__
           , [Prop(Type(), t, [])]
           )
         ))
    ; fail

  nabl-get-name :
    VarDeclInit(t, name, _) -> name

  nabl-name-apply(s) =
    VarDeclInit(id, s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?VarDeclInit(t, name, _)
    ; origin-track-forced(
        VarDeclInit(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?VarDeclInit(t, name, _)
    ; (where(id)
       ; VarDeclInit(
           id
         , nabl-store-props(
           | ctx__
           , [Prop(Type(), t, [])]
           )
         , id
         ))
    ; fail

  nabl-get-name :
    VarAssign(name, _) -> name

  nabl-name-apply(s) =
    VarAssign(s, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?VarAssign(name, _)
    ; origin-track-forced(
        VarAssign(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-get-name :
    Var(name) -> name

  nabl-name-apply(s) =
    Var(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Var(name)
    ; origin-track-forced(
        Var(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    ArrayAssign(name, _, _) -> name

  nabl-name-apply(s) =
    ArrayAssign(s, id, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?ArrayAssign(name, _, _)
    ; origin-track-forced(
        ArrayAssign(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        , id
        )
      |
      )

  nabl-get-name :
    VarRef(name) -> name

  nabl-name-apply(s) =
    VarRef(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?VarRef(name)
    ; origin-track-forced(
        VarRef(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            , <{:
                 id
                 ; !UseCandidate(
                      NablNsModule()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            , <{:
                 id
                 ; !UseCandidate(
                      NablNsLibrary()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    ConnOp(name) -> name

  nabl-name-apply(s) =
    ConnOp(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?ConnOp(name)
    ; origin-track-forced(
        ConnOp(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSkeleton()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    ConcurSigLoop(name, _, _) -> name

  nabl-name-apply(s) =
    ConcurSigLoop(s, id, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?ConcurSigLoop(name, _, _)
    ; origin-track-forced(
        ConcurSigLoop(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        , id
        )
      |
      )

  nabl-get-name :
    Map(name, _, _) -> name

  nabl-name-apply(s) =
    Map(s, id, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Map(name, _, _)
    ; origin-track-forced(
        Map(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        , id
        )
      |
      )

  nabl-get-name :
    ForLoop(name, _, _) -> name

  nabl-name-apply(s) =
    ForLoop(s, id, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?ForLoop(name, _, _)
    ; origin-track-forced(
        ForLoop(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        , id
        )
      |
      )