module deref

imports
	src-gen/signatures/Entity-sig
	src-gen/signatures/MiniJava-sig
	src-gen/signatures/Expression-sig
    src-gen/signatures/Statement-sig
    src-gen/signatures/Signal-sig
    src-gen/signatures/Type-sig
    src-gen/signatures/Skeleton-sig
	exp-trans
	lib
	helper
	program-trans
	signal-trans
	skeleton-trans
	component-trans
	system-trans
	runtime/types/query
	exp-trans
	statement-trans

signature
	

	
rules
	/*
		Dereference the program and its components
	*/
	
	unroll-and-dereference(|ast): Program(_, _, main, _, skels*) -> resTuple
	with
		(compTuples*, statements*) := <unroll-and-dereference(|ast, [])> main;
		resTuple := (compTuples*, skels*, statements*)
		
	unroll-and-dereference(|ast, argArray*):
		Main(insigs*, outsigs*, argdecls*, statements*) -> (resCompTuples*, resSigArray*)
		with
			varsLength := <statements-get-vardecls; length> statements*;
			signalsLength := <statements-get-sigdecls; length> statements*;
			varArray* := <copy> (varsLength, 0);
			totalArray* := [argArray*, varArray*];
			inoutsigs* := [insigs*, outsigs*];
			sigArray* := <copy>(<add> (<length> inoutsigs*, signalsLength), Nop());
			(emptyModArray*, newVarArray*, newSigArray*, resCompTuples*) := <deref-statements(|ast, [], totalArray*, sigArray*, [])> statements*;
			resSigArray* := <set-in-out-sigs(|argArray*); delete-unused-sigs>(insigs*, outsigs*, newSigArray*)
			
	unroll-and-dereference(|ast, argArray*, compTuples*):
		Entity(name, insigs*, outsigs*, _, statements*) -> (resCompTuples*, resSigArray*)
		with
			varsLength := <statements-get-vardecls; length> statements*;
			signalsLength := <statements-get-sigdecls; length> statements*;
			varArray* := <copy>(varsLength, 0);
			totalArray* := [argArray*, varArray*];
			inoutsigs* := [insigs*, outsigs*];
			sigArray* := <copy>(<add>(<length> inoutsigs*, signalsLength), Nop());
			(emptyModArray*, newArray*, newSigArray*, resCompTuples*) := <deref-statements(|ast, [], totalArray*, sigArray*, compTuples*)> statements*;
			resSigArray* := <set-in-out-sigs(|argArray*); delete-unused-sigs>(insigs*, outsigs*, newSigArray*)
	
	set-in-out-sigs(|varArray*):
		(insigs*, outsigs*, sigArray*) -> resSigArray*
		with
			newSigArray* := <set-in-sigs(|varArray*)>(0, insigs*, sigArray*);
			outsig := <set-out-sig(|varArray*)>(0, outsigs*, newSigArray*);
			declSigArray* := <drop(|<add>(<length> insigs*, <length> outsigs*))> newSigArray*;
			completeSigArray* := [outsig, declSigArray*];
			resSigArray* := <bottomup(try(subt-sigref(|<add>(<length> insigs*, <length> outsigs*))))> completeSigArray*
			
	set-in-sigs(|varArray*):
		(additionalLength, [SigArg(name, exp)| sigArgs*], sigArray*) -> resSigArray*
		with
			index := <get-sig-index> name;
			newSigArray* := <bottomup(try(replace-signal(|index, additionalLength)))> sigArray*;
			resSigArray* := <set-in-sigs(|varArray*)>(<add>(additionalLength, <exp-to-int(|"Error", varArray*, [])> exp), sigArgs*, newSigArray*)
	
	set-in-sigs(|varArray*):
		(additionalLength, [], sigArray*) -> sigArray*
	
	replace-signal(|index, addLength):
		SigRef(sigIndex, array) -> res
		with
			if <eq>(index, sigIndex) then
				res := InputSig(<zip(add)>(array, <copy>( <length> array, addLength)))
			else
				res := SigRef(sigIndex, array)
			end
			
	set-out-sig(|varArray*):
		(additionalLength, [SigArg(name, exp) | sigArgs*], sigArray*) -> resSig
		with
			index := <get-sig-index> name;
			thisSig:= <index(|index); replace-assign(|index, additionalLength)> sigArray*;
			if <eq>(<length> sigArgs*, 0) then
				resSig := thisSig
			else
				otherSig := <set-out-sig(|varArray*)>(<add>(additionalLength, <exp-to-int(|"Error",varArray*, [])> exp), sigArgs*, sigArray*);
				resSig := <add-to-signal>(thisSig, otherSig)
			end
	
	replace-assign(|index, addLength):
		SignalAssign(index, array, signal, conskel) -> res
		with
			res := OutputAssign(<zip(add)>(array, <copy>( <length> array, addLength)), signal, conskel)
			
	subt-sigref(|subtNum):
		SigRef(num, array) -> SigRef(<subt>(num, subtNum), array)
		
	subt-sigref(|subtNum):
		SignalAssign(num, array, sig, conskel) -> SignalAssign(<subt>(num, subtNum), array, sig, conskel)
		
	delete-unused-sigs:
		systems* -> resSystems*
		with
			unusedSignalIndices* := <map-with-index(get-nop-indices); concat> systems*;
			resSystems* := <remove-at-indices(|systems*); shift-left(|1)> unusedSignalIndices*
			
	get-nop-indices:
		(index, Nop()) -> [index]
		
	get-nop-indices:
		(index, notNop) -> res*
		with res* := []		
			
	remove-at-indices(|systems*):
		[index, indices*] -> resSystems*
		with
			systemsHead* := <take(|<subt>(index, 1))> systems*;
			systemsTail* := <drop(|<add>(<length> systemsHead*, 1))> systems*;
			newSystems* := [systemsHead*, systemsTail*];
			resSystems* := <remove-at-indices(|newSystems*)> indices*
			
	remove-at-indices(|systems*):
		[] -> systems*
					
	/*
		Dereference a list of statements
	*/
			
	deref-statements(|ast, modArray*, varArray*, sigArray*, compTuples*):
		[statement | statements*] -> (resModArray*, resVarArray*, resSigArray*, resCompTuples*)
		with
			
			(newModArray*, newVarArray*, newSigArray*, newCompTuples*) := <deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*)> statement;
			(resModArray*, resVarArray*, resSigArray*, resCompTuples*) := <deref-statements(|ast, newModArray*, newVarArray*, newSigArray*, newCompTuples*)> statements*
			
	deref-statements(|ast, modArray*, varArray*, sigArray*, compTuples*):
		[] -> (modArray*, varArray*, sigArray*, compTuples*)
			
	/*
		Dereference single statements
	*/
	
	deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*):
		VarDeclInit(type, name, exp) -> (modArray*, resVarArray*, sigArray*, newCompTuples*)
		with
			(newCompTuples*, value) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(type, exp);
			varNum := <get-var-index> name;
			resVarArray* := <set-index>(<subt>(varNum, 1), value, varArray*)
			
	deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*):
		VarAssign(name, exp) -> (modArray*, resVarArray*, sigArray*, newCompTuples*)
		with
			type := <get-type> name;
			(newCompTuples*, elem) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(type, exp);
			index := <get-var-index> name;
			realIndex := <subt>(index, 1);
			resVarArray* := <set-index> (realIndex, elem, varArray*)
			
	deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*):
		ArrayAssign(name, array*, exp) -> (modArray*, resVarArray*, sigArray*, newCompTuples*)
		with
			index := <get-var-index> name;
			type := <get-type> name;
			(newCompTuples*, elems*) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(type, exp);
			thisVar := <index(|index)> varArray*;
			(unusedCompTuples, indices*) := <array-to-list(|ast, modArray*, varArray*, newCompTuples*, Integer())> array*;
			if <eq>(<length> indices*, <length> elems*) then
				newVar := <set-indices>(<map(dec)> indices*, elems*, thisVar);
				resVarArray* := <set-index> (<dec> index, newVar, varArray*)
			else
				resVarArray* := <debug; fail>"Cannot assign an array to another array of a different length."
			end
			
	deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*):
		SignalAssign(name, array, signal, None()) -> (modArray*, varArray*, resSigArray*, compTuples*)
		with
			signalres := <deref-signal(|varArray*)> signal;
			(unusedCompTuples*, intArray) := <array-to-list(|ast, [], varArray*, [], Integer())> array;
			num := <get-sig-index> name;
			currentSig := <index(|num)> sigArray*;
			if <?Nop()> currentSig then
				newSig := SignalAssign(num, <map(add(|1))>intArray, signalres, None())
			else
				newSig := <add-to-signal> (currentSig, <map(add(|1))>intArray, signalres, None())
			end;
			resSigArray* := <set-index> (<subt>(num, 1), newSig, sigArray*)
				
	deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*):
		SignalAssign(name, array, signal, Some(ConSkel(conOp, skel))) -> (modArray*, varArray*, resSigArray*, resCompTuples*)
		with
			signalres := <deref-signal(|varArray*)> signal;
			(unusedCompTuples*, intArray) := <array-to-list(|ast, [], varArray*, [], Integer())> array;
			(resCompTuples*, skelRes) := <deref-skel(|ast, varArray*, compTuples*)> skel;
			num := <get-sig-index> name;
			currentSig := <index(|num)> sigArray*;
			if <?Nop()> currentSig then
				newSig := SignalAssign(num, <map(inc)> intArray, signalres, Some(ConSkel(conOp, skelRes)))
			else
				newSig := <add-to-signal> (currentSig, <map(inc)> intArray, signalres, Some(ConSkel(conOp, skelRes)))
			end;
			resSigArray* := <set-index> (<subt>(num, 1), newSig, sigArray*)
	
	deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*):
		IfThenElse(value, statements1*, statements2*) -> (resModArray*, resVarArray*, resSigArray*, resCompTuples*)
		with
			(newCompTuples*, condValue) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)> (Boolean(), value);
			if <eq> (condValue, 0) then
				(resModArray*, resVarArray*, resSigArray*, resCompTuples*) := <deref-statements(|ast, modArray*, varArray*, sigArray*, newCompTuples*)> statements2*
			else
				(resModArray*, resVarArray*, resSigArray*, resCompTuples*) := <deref-statements(|ast, modArray*, varArray*, sigArray*, newCompTuples*)> statements1*
			end
			
	deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*):
		WhileLoop(value, statements*) -> (resModArray*, resVarArray*, resSigArray*, resCompTuples*)
		with
			(newCompTuples*, condValue) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)> (Boolean(), value);
			if <eq>(condValue, 0) then
				resVarArray* := varArray*;
				resSigArray* := sigArray*;
				resCompTuples* := newCompTuples*;
				resModArray* := modArray*
			else
				(newModArray*, newVarArray*, newSigArray*, newerCompTuples*) := <deref-statements(|ast, modArray*, varArray*, sigArray*, newCompTuples*)> statements*;
				(resModArray*, resVarArray*, resSigArray*, resCompTuples*) := <deref-statement(|ast, newModArray*, newVarArray*, newSigArray*, newerCompTuples*)> WhileLoop(value, statements*)
			end
			
	deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*):
		ForLoop(name, array*, statements*) -> (resModArray*, resVarArray*, resSigArray*, resCompTuples*)
		with
			arrayType := <get-type; array-get-type> array*;
			(newCompTuples*, derefedArray*) := <array-to-list(|ast, modArray*, varArray*, compTuples*, arrayType)> array*;
			varIndex := <get-var-index> name;
			(resModArray*, resVarArray*, resSigArray*, resCompTuples*) := <loop-over-array(|ast, varIndex, statements*, modArray*, varArray*, sigArray*, newCompTuples*)> derefedArray*
	
	deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*):
		SignalDecl(name, size) -> (modArray*, varArray*, sigArray*, compTuples*)
	
	deref-statement(|ast, modArray*, varArray*, sigArray*, compTuples*):
		CompAttrAssign(name, index, attr, exp) -> (resModArray*, varArray*, sigArray*, compTuples*)
		with
			modIndex := <get-mod-index> name;
			arrayIndex := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(Integer(), index);
			currentMod* := <index(|modIndex)> modArray*;
			attrValue := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(<get-type> exp, exp);
			newAttr* := [(arrayIndex, attr, attrValue)];
			newMod := [currentMod*, newAttr*];
			resModArray* := <set-index>(<subt>(modIndex, 1), newMod, modArray*)			
			
	loop-over-array(|ast, varIndex, statements*, modArray*, varArray*, sigArray*, compTuples*):
		[newVarValue | array*] -> (resModArray*, resVarArray*, resSigArray*, resCompTuples*)
		with
			newVarArray* := <set-index>(<subt>(varIndex, 1), newVarValue, varArray*);
			(newModArray*, newerVarArray*, newSigArray, newCompTuples*) := <deref-statements(|ast, modArray*, newVarArray*, sigArray*, compTuples*)> statements*;
			(resModArray*, resVarArray*, resSigArray*, resCompTuples*) := <loop-over-array(|ast, varIndex, statements*, newModArray*, newerVarArray*, newSigArray, newCompTuples*)> array*
			
	loop-over-array(|ast, varIndex, statements*, modArray*, varArray*, sigArray*, compTuples*):
		[] -> (modArray*, varArray*, sigArray*, compTuples*)
			
	/*
	
	Dereference expressions by type
	
	*/
	
	deref-by-type(|ast, modArray*, varArray*, compTuples*):
		(Array(Skeleton()), exp) -> (resCompTuples*, elem*)
		with
			(resCompTuples*, elem*) := <deref-skel(|ast, varArray*, compTuples*)> exp
	
	deref-by-type(|ast, modArray*, varArray*, compTuples*):
		(Array(type), exp) -> (resCompTuples*, elem*)
		with
			(resCompTuples*, elem*) := <array-to-list(|ast, modArray*, varArray*, compTuples*, type)> exp
			
	deref-by-type(|ast, modArray*, varArray*, compTuples*):
		(Skeleton(), exp) -> (resCompTuples*, elem)
		with
			(resCompTuples*, elem):= <deref-skel(|ast, varArray*, compTuples*)> exp
			
	deref-by-type(|ast, modArray*, varArray*, compTuples*):
		(other, exp) -> (compTuples*, elem)
		with
			elem := <exp-to-int(|"Error",varArray*, [])> exp
	
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		ManualDefinition([elem | array*]) -> (resCompTuples*, res*)
		with
			(newCompTuples*, res1) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(type, elem);
			(resCompTuples*, res2*) := <array-to-list(|ast, modArray*, varArray*, newCompTuples*, type)> ManualDefinition(array*);
			res* :=<merge>(res1, res2*)
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		ManualDefinition([]) -> (compTuples*, res*)
		with
			res* := []
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		Append(array1, array2) -> (resCompTuples*, res*)
		with
			(newCompTuples*, elem) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(type, array1);
			(resCompTuples*, elems*) := <deref-by-type(|ast, modArray*, varArray*, newCompTuples*)> (type, array2);
			res* :=<merge>(elem, elems*)
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		AppendArray(array1, array2) -> (resCompTuples*, res*)
		with
			(newCompTuples*, elem*) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(Array(type), array1);
			(resCompTuples*, elems*) := <deref-by-type(|ast, modArray*, varArray*, newCompTuples*)> (Array(type), array2);
			res* := [elem*, elems*]
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		Interval(begin, interval, end) -> (compTuples*, res*)
		with
			intBegin := <exp-to-int(|"Error",varArray*, [])> begin;
			intInterval := <exp-to-int(|"Error",varArray*, [])> interval;
			intEnd := <exp-to-int(|"Error",varArray*, [])> end;
			if <gt>(intBegin, intEnd) then
				res* := <build-int-array(geq, subt|intInterval,0)>(intBegin, intEnd)
			else
				res* := <build-int-array(leq, add|intInterval, 1)>(intBegin, intEnd)
			end
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		PartOfArray(array, part) -> (resCompTuples*, res*)
		with
			(unusedCompTuples*, partInts*) := <array-to-list(|ast, modArray*, varArray*, [], Integer())> part;
			(resCompTuples*, fullRes*) := <array-to-list(|ast, modArray*, varArray*, compTuples*, type)> array;
			res* := <map(inc; array-at-index(|fullRes*))> partInts*
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		Increment(array, exp) -> (compTuples*, res*)
		with
			(unusedCompTuples*, arrayInts*) := <array-to-list(|ast, modArray*, varArray*, [], Integer())> array;
			length := <length> arrayInts*;
			intValue := <exp-to-int(|"Error",varArray*, [])> exp;
			res* := <zip(add)> (arrayInts*,  <copy>(length, intValue))
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		ShiftRight(array, exp) -> (resCompTuples*, res*)
		with
			(resCompTuples*, unshiftedRes*) := <array-to-list(|ast, modArray*, varArray*, compTuples*, type)> array;
			intValue := <exp-to-int(|"Error",varArray*, [])> exp;
			res* := <shift-right(|intValue)> unshiftedRes*
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		ShiftLeft(array, exp) -> (resCompTuples*, res*)
		with
			(resCompTuples*, unshiftedRes*) := <array-to-list(|ast, modArray*, varArray*, compTuples*, type)> array;
			intValue := <exp-to-int(|"Error",varArray*, [])> exp;
			res* := <shift-left(|intValue)> unshiftedRes*
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		Map(varId, exp, array*) -> (resCompTuples*, res*)
		with
			(newCompTuples*, derefedArray*) := <array-to-list(|ast, modArray*, varArray*, compTuples*, type)> array*;
			(resCompTuples*, res*) := <map-to-list(|ast, modArray*, varArray*, newCompTuples*, type)>(varId, exp, derefedArray*)
	
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		VarRef(name) -> (compTuples*, res*)
		with
			res* := <index(|<get-var-index> name); to-list> varArray*
	
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		Repeat(num, exp) -> (resCompTuples*, res*)
		with
			(resCompTuples*, elem) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(type, exp);
			intSize := <exp-to-int(|"Error",varArray*, [])> num;
			res* := <copy>(intSize, elem)
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		RepeatArray(num, exp) -> (resCompTuples*, res*)
		with
			(resCompTuples*, elem*) := <array-to-list(|ast, modArray*, varArray*, compTuples*, type)>exp;
			intSize := <exp-to-int(|"Error",varArray*, [])> num;
			totalres* := <copy>(intSize, elem*);
			emptyArray := [];
			res* := <concat>[totalres*, emptyArray]
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		ArrayLoop(name, [elem | array*], exp) -> (resCompTuples*, res*)
		with
			index := <get-var-index> name;
			newVarArray* := <set-index>(<subt>(index, 1), elem, varArray*);
			(newCompTuples*, expRes) := <deref-by-type(|ast, modArray*, newVarArray*, compTuples*)> (type, exp);
			(resCompTuples*, restRes*) := <array-to-list(|ast, modArray*, newVarArray*, newCompTuples*, type)> ArrayLoop(name, array*, exp);
			res* := [expRes, restRes*]
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		ArrayLoop(name, [], exp) -> (compTuples*, res*)
		with
			res* := []
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		LogsOf2(num) -> (compTuples*, res*)
		with
			intValue := <exp-to-int(|"Error",varArray*, [])> num;
			res* := <build-int-array(eq, div|2, 0)>(intValue, 1)
			
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		FoldRight(op, array*) -> <fold-to-value(|ast, modArray*, varArray*, compTuples*)> FoldRight(op, array*)
	
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		FoldLeft(op, array*) -> <fold-to-value(|ast, modArray*, varArray*, compTuples*)> FoldLeft(op, array*)
	
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		[elem | elems*] -> (compTuples*, res*)
		with
			res* := [elem | elems*]
	
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		[] -> (compTuples*, [])
		
	array-to-list(|ast, modArray*, varArray*, compTuples*, type):
		elem -> (newCompTuples*, res)
		with
			(newCompTuples*, value) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(type, elem);
			res := [value]
	
	map-to-list(|ast, modArray*, varArray*, compTuples*, type):
		(varId, exp, [elem, array*]) -> (resCompTuples*, res*)
		with	
			index := <get-var-index> varId;
			newVarArray* := <set-index>(<subt>(index, 1), elem, varArray*);
			(newCompTuples*, expRes) := <deref-by-type(|ast, modArray*, newVarArray*, compTuples*)> (type, exp);
			(resCompTuples*, restRes*) := <map-to-list(|ast, modArray*, varArray*, newCompTuples*, type)> (varId, exp, array*);
			res* := [expRes, restRes*]	
	
	map-to-list(|ast, modArray*, varArray*, compTuples*, type):
		(varId, exp, []) -> (compTuples*, res*)
		with
			res* := []
	
	/*
		Dereference signals
	*/
			
	deref-signal(|varArray*):
		SigRef(name, array) -> SigRef(num,  resArray)
		with
			num := <get-sig-index> name;
			(unusedCompTuples*, newArray) := <array-to-list(|"error", [], varArray*, [], Integer())> array;
			resArray := <map(add(|1))> newArray
			
	deref-signal(|varArray*):
		ConcurSig(signal1, signal2) -> res
		with
			res1 := <deref-signal(|varArray*)> signal1;
			res2 := <deref-signal(|varArray*)> signal2;
			(res, success) := <signal-combine> (res1, res2)
			
	deref-signal(|varArray*):
		Zip(signal1, signal2) -> res
		with
			res1 := <deref-signal(|varArray*)> signal1;
			res2 := <deref-signal(|varArray*)> signal2;
			res := <signal-zip-together> (res1, res2)
	
	deref-signal(|varArray*): 
		ConcurSigLoop(indexVar, array, signal) ->  res
		with
			(unusedCompTuples*, newArray*) := <array-to-list(|"error", [], varArray*, [], Integer())> array;
			length := <length> newArray*;
			index := <get-var-index> indexVar;
			[num] := <take(|1)> newArray*;
			realIndex := <subt>(index, 1);
			newVarArray* := <set-index> (realIndex, num, varArray*);
			thisRes := <deref-signal(|newVarArray*)> signal;
			if <leq> (length, 1)
			then 
				res := thisRes
			else newerArray* := <drop(|1)> newArray*;
				thatRes := <deref-signal(|newVarArray*)> ConcurSigLoop(indexVar, newerArray*, signal);
				(res, success) := <signal-combine>(thisRes, thatRes)
			end
	/*
		Dereference skeletons
	*/
	
	deref-skel(|ast, varArray*, compTuples*):
		LibModNum(num) -> (compTuples*, LibModNum(num))
		
	deref-skel(|ast, varArray*, compTuples*):
		VarRef(name) -> (compTuples*, res)
		with
			if <get-var-index> name then
				res := <index(|<get-var-index> name)>varArray*
			else
				num := <get-lib-index; int-to-string> name;
				res := LibModNum(num)
			end
			
	deref-skel(|ast, varArray*, compTuples*):
		BinOp(skel1, ConOp(op), skel2) -> <deref-skel(|ast, varArray*, compTuples*)>Connect(skel1, op, skel2)
		
	deref-skel(|ast, varArray*, compTuples*):
		CompRef((num, args), size) -> (compTuples*, CompRef((num, args), size))
		
	deref-skel(|ast, varArray*, compTuples*):
		CompRef(name, args*) -> (resCompTuples*, res)
		with
			index := <get-comp-index> name;
			(newCompTuples, argArray*) := <deref-args(|ast, varArray*, compTuples*)> args*;
			comp := <get-component(|index)> ast;
			sizes := <component-get-sizes(|argArray*)> comp;
			res := CompRef((index, argArray*), sizes);
			if <lookup>((index, argArray*), compTuples*) then
				resCompTuples* := compTuples*
			else
				(newCompTuples*, statements*) := <unroll-and-dereference(|ast, argArray*, compTuples*)> comp;
				resCompTuples* := [((index, argArray*),statements*), newCompTuples*]
			end
		
	deref-skel(|ast, varArray*, compTuples*):
		Nop() -> (compTuples*, Nop())
	
	deref-skel(|ast, varArray*, compTuples*):
		Connect(skel1, conOp, skel2) -> (resCompTuples*, res)
		with
			(compTuples1*, res1) := <deref-skel(|ast, varArray*, compTuples*)> skel1;
			(resCompTuples*, res2) := <deref-skel(|ast, varArray*, compTuples1*)> skel2;
			conRes := <con-op-get-index> conOp;
			res := Connect(res1, conRes, res2)
		
	deref-skel(|ast, varArray*, compTuples*): 
		SkelLoop(connectOp, indexVar, array, skeleton) -> (resCompTuples*, res)
		with
			(unusedCompTuples*, newArray*) := <array-to-list(|ast, [], varArray*, [], Integer())> array;
			length := <length> newArray*;
			if <leq> (length, 0)
			then res := Nop();
				resCompTuples* := compTuples*
			else
				index := <get-var-index> indexVar;
				num := <index(|1)> newArray*;
				realIndex := <subt>(index, 1);
				newVarArray* := <set-index> (realIndex, num, varArray*);
				(newCompTuples*, thisRes) := <deref-skel(|ast, newVarArray*, compTuples*)> skeleton;
				if <eq> (length, 1)
				then
					res := thisRes;
					resCompTuples* := newCompTuples*
				else 
					newerArray* := <drop(|1)> newArray*;
					(resCompTuples*, thatRes) := <deref-skel(|ast, newVarArray*, newCompTuples*)> SkelLoop(connectOp, indexVar, newerArray*, skeleton);
					res := Connect(thisRes, connectOp, thatRes)
				end
			end
		
	deref-skel(|ast, varArray*, compTuples*):
		FoldRight(op, array*) -> <fold-to-value(|ast, [], varArray*, compTuples*)> FoldRight(op, array*)
	
	deref-skel(|ast, varArray*, compTuples*):
		FoldLeft(op, array*) -> <fold-to-value(|ast, [], varArray*, compTuples*)> FoldLeft(op, array*)
		
	deref-skel(|ast, varArray*, compTuples*):
		arrayOfSkels -> (resCompTuples*, res)
		with
			(newCompTuples*, skelArray) := <array-to-list(|ast, [], varArray*, compTuples*, Skeleton())> arrayOfSkels;
			(resCompTuples*, res) := <deref-skels(|ast, varArray*, newCompTuples*)> skelArray
			
	deref-skels(|ast, varArray*, compTuples*):
		[skel|skels*] -> (resCompTuples*, res*)
		with
			(newCompTuples*, thisRes) := <deref-skel(|ast, varArray*, compTuples*)> skel;
			(resCompTuples*, thatRes*) := <deref-skels(|ast, varArray*, newCompTuples*)> skels*;
			res* := [thisRes, thatRes*]
			
	deref-skels(|ast, varArray*, compTuples*):
		[] -> (compTuples*, res*)
		with
			res* := []
			
	con-op-get-index:
		ConnOp(name) -> ConnOp(<get-skel-index> name)
		
	con-op-get-index:
		otherOp -> otherOp
		
	deref-args(|ast, varArray*, compTuples*):
		[arg| args*] -> (resCompTuples*, resArgArray*)
		with
			type := <get-type> arg;
			(newCompTuples*, thisArg) := <deref-by-type(|ast, [], varArray*, compTuples*)>(type, arg);
			(resCompTuples*, thatArgs*) := <deref-args(|ast, varArray*, newCompTuples*)> args*;
			resArgArray* := [thisArg, thatArgs*]
			
	deref-args(|ast, varArray*, compTuples*):
		[] -> (compTuples*, resArgArray*)
		with
			resArgArray* := []
		
	add-to-signal:
		(OutputAssign(inArray1, inSig1, conskel1), OutputAssign(inArray2, inSig2,conskel2)) -> <add-to-signal>(OutputAssign(inArray1, inSig1, conskel1), inArray2, inSig2,conskel2)
		
	add-to-signal:
		(OutputAssign(inArray, inSig,None()), array, signal, conSkel) -> OutputAssign(newInArray, newInSig, conSkel)
		with
			if <eq>(<isect;length>(inArray, array), 0) then
				newInArray := <conc>(inArray, array);
				if <eq>(<signal-get-length> inSig, 0) then
					newInSig := signal
				else
					newInSig := ConcurSig(inSig, signal)
				end
			else
				<debug(!"Cannot assign to the same output port twice.")> (inArray, array)
			end
	
	add-to-signal:
		(OutputAssign(inArray, inSig, Some(ConSkel(inOp, inSkel))), array, signal, Some(ConSkel(conOp, skel))) -> OutputAssign(newInArray, newInSig, Some(ConSkel(conOp, newSkel)))
		with
			if <eq>(<isect;length>(inArray, array), 0) then
				newInArray := <conc>(inArray, array);
				if <eq>(<signal-get-length> inSig, 0) then
					newInSig := signal;
					newSkel := skel
				else
					newInSig := ConcurSig(inSig, signal);
					newSkel := <merge>(inSkel, skel)
				end
			else
				<debug(!"Cannot assign to the same output port twice.")> (inArray, array)
			end
			
	add-to-signal:
		(SignalAssign(num, inArray, inSig, None()), array, signal, None()) -> SignalAssign(num, newInArray, newInSig, Some(ConSkel(conOp, skel)))
		with
			if <eq>(<isect;length>(inArray, array), 0) then
				newInArray := <conc>(inArray, array);
				skel := <copy>(<add>(<length> inArray, <length> array), Nop());
				conOp := Linear();
				if <eq>(<signal-get-length> inSig, 0) then
					newInSig := signal
				else
					newInSig := ConcurSig(inSig, signal)
				end
			else
				<debug(!"Cannot assign to the same signal port twice.")> (inArray, array)
			end
			
	add-to-signal:
		(SignalAssign(num, inArray, inSig, None()), array, signal, Some(ConSkel(conOp, skel))) -> SignalAssign(num, newInArray, newInSig, Some(ConSkel(conOp, newSkel)))
		with
			if <eq>(<isect;length>(inArray, array), 0) then
				newInArray := <conc>(inArray, array);
				if <eq>(<signal-get-length> inSig, 0) then
					newInSig := signal;
					newSkel := skel
				else
					newInSig := ConcurSig(inSig, signal);
					nops* := <copy>(<signal-get-length> inSig, Nop());
					newSkel := <merge>(nops*, skel)
				end
			else
				<debug(!"Cannot assign to the same signal port twice.")> (inArray, array)
			end
			
	add-to-signal:
		(SignalAssign(num, inArray, inSig, Some(ConSkel(conOp, inSkel))), array, signal, None()) -> SignalAssign(num, newInArray, newInSig, Some(ConSkel(conOp, newSkel)))
		with
			if <eq>(<isect;length>(inArray, array), 0) then
				newInArray := <conc>(inArray, array);
				skel := <copy>(<length> array, Nop());
				if <eq>(<signal-get-length> inSig, 0) then
					newInSig := signal;
					newSkel := skel
				else
					newInSig := ConcurSig(inSig, signal);
					newSkel := <merge>(inSkel, skel)
				end
			else
				<debug(!"Cannot assign to the same signal port twice.")> (inArray, array)
			end
			
	add-to-signal:
		(SignalAssign(num,inArray, inSig, Some(ConSkel(inConOp, inSkel))), array, signal, Some(ConSkel(conOp, skel))) -> SignalAssign(num,newInArray,  newInSig, Some(ConSkel(conOp, newSkel)))
		with
			if <eq>(<isect;length>(inArray, array), 0) then
				newInArray := <conc>(inArray, array);
				if <eq>(<signal-get-length> inSig, 0) then
					newInSig := signal;
					newSkel := skel
				else
					newInSig := ConcurSig(inSig, signal);
					newSkel := <merge>(inSkel, skel)
				end
			else
				<debug(!"Cannot assign to the same signal port twice.")> (inArray, array)
			end
			
	fold-to-value(|ast, modArray*, varArray*, compTuples*):
		FoldRight(op, array*) -> (resCompTuples*, res)
		with
			arrayType := <get-type; array-get-type> array*;
			(resCompTuples*, derefedArray*) := <array-to-list(|ast, modArray*, varArray*, compTuples*, arrayType)> array*;
			res := <foldr(![], apply-op(|op, arrayType, ast, modArray*, varArray*, resCompTuples*))> derefedArray*
	
	fold-to-value(|ast, modArray*, varArray*, compTuples*):
		FoldLeft(op, array*) -> (resCompTuples*, res)
		with
			arrayType := <get-type; array-get-type> array*;
			(resCompTuples*, derefedArray*) := <array-to-list(|ast, modArray*, varArray*, compTuples*, arrayType)> array*;
			res := <foldl(apply-op(|op, arrayType, ast, modArray*, varArray*, resCompTuples*))> (derefedArray*, [])
	
	apply-op(|op, type, ast, modArray*, varArray*, compTuples*):
		([], skel) -> skel
		
	apply-op(|op, type, ast, modArray*, varArray*, compTuples*):
		(skel, []) -> skel
		
	apply-op(|op, type, ast, modArray*, varArray*, compTuples*):
		(skel1, skel2) -> res*
		with
			(unusedCompTuples*, res*) := <deref-by-type(|ast, modArray*, varArray*, compTuples*)>(type, BinOp(skel1, op, skel2))
	
	array-get-type:Array(type) -> type
			
	add(|num):
		a -> <add>(a, num)